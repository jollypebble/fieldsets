// Callbacks are set when the value is being handled by our react app.
// At some point we will move the hacky excel functions to react callbacks and push this json data to an official data store/relational db
export default [
  {
    id: 'I8',
    name: 'L6',
    value: 'SUM(M12,G13,K13,O9)',
    type: 'currency',
    callback: '',
    notes:[],
    owners:[],
    parent: 'defense_allocation',
    order: 0,
    alwaysDisplay: true,
  },
  {
    id: 'E11',
    name: 'E9:E10',
    value: '',
    type: 'status',
    callback: false,
    notes:[],
    owners:[],
    parent: 'will',
    order: 0,
    alwaysDisplay: true,
  },
  {
    id: 'G12:H12',
    name: '"Monthly Benefit:"',
    value: '',
    type: 'currency', // TODO: Define currency sub types [credit vs debt, loss etc.], for now I am assuming having type defs will be useful as we prototype data structures. A type will correspond with a react field component.
    callback: false,
    notes:[],
    owners:[],
    parent: 'disability_insurance',
    order: 0,
    alwaysDisplay: true,
  },
  {
    id: 'G13:I13',
    name: '"Premium:"',
    value: 'SUM(F15,F16)',
    type: 'currency',
    callback: false,
    notes:[],
    owners:['F15','F16'],
    parent: 'disability_insurance',
    order: 1,
    alwaysDisplay: true,
  },
  {
    id: 'F15',
    name: 'G15:H15',
    value: '',
    type: 'currency',
    callback: false,
    notes:[],
    owners:[],
    parent: 'disability_insurance',
    order: 2,
    alwaysDisplay: false,
  },
  {
    id: 'F16',
    name: 'G16:H16',
    value: '',
    type: 'currency',
    callback: false,
    notes:[],
    owners:[],
    parent: 'disability_insurance',
    order: 3,
    alwaysDisplay: false,
  },
  {
    id: 'K12',
    name: '"Daily Benefit:"',
    value: '',
    type: 'currency',
    callback: false,
    notes:[],
    owners:[],
    parent: 'long_term_care',
    order: 0,
    alwaysDisplay: true,
  },
  {
    id: 'K13:L14',
    name: '"Premium:"',
    value: 'SUM(L15,L16)',
    type: 'currency',
    callback: false,
    notes:[],
    owners:['L15','L16'],
    parent: 'long_term_care',
    order: 1,
    alwaysDisplay: true,
  },
  {
    id: 'L15',
    name: 'K15',
    value: '',
    type: 'currency',
    callback: false,
    notes:[],
    owners:[],
    parent: 'long_term_care',
    order: 2,
    alwaysDisplay: false,
  },
  {
    id: 'L16',
    name: 'K16',
    value: '',
    type: 'currency',
    callback: false,
    notes:[],
    owners:[],
    parent: 'long_term_care',
    order: 3,
    alwaysDisplay: false,
  },
  /**
   * Q For Aaron:
   * Inconsistencies between Summation of Term life vs LTC, Disbility Insurance. Do we want to sum 2 values or just take a single value?.
   * Currently can take a single value but workflow would need to change to incorporate sheets O7:P8 location
   */
  {
    id: 'N11:O11',
    name: '"Benefit:"',
    value: '',
    type: 'currency',
    callback: false,
    notes:[],
    owners:[],
    parent: 'term_insurance',
    order: 0,
    alwaysDisplay: true,
  },
  {
    id: 'M12:N12',
    name: '"Premium:"',
    value: 'SUM(M14,M15)',
    type: 'currency',
    callback: false,
    notes:[],
    owners:['M14','M15'],
    parent: 'term_insurance',
    order: 1,
    alwaysDisplay: true,
  },
  {
    id: 'M14',
    name: 'N14',
    value: '',
    type: 'currency',
    callback: false,
    notes:[],
    owners:[],
    parent: 'term_insurance',
    order: 2,
    alwaysDisplay: false,
  },
  {
    id: 'M15',
    name: 'N15',
    value: '',
    type: 'currency',
    callback: false,
    notes:[],
    owners:[],
    parent: 'term_insurance',
    order: 3,
    alwaysDisplay: false,
  },
  // TODO: offense_allocation

  // TODO: people

  // TO Monthly Contribution, Lum Sum & Net Worth.
];
