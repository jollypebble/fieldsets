import React, { Component } from 'react';
// import Tree from 'react-d3-tree';
// import { Row, Col } from 'react-flexbox-grid';
import { treeData } from 'config';
// import d3 from 'd3';

// Click handler
import injectTapEventPlugin from 'react-tap-event-plugin';
// partials
import NodeLabel from './Partials/NodeLabel';
import ChildNode from './Partials/ChildNode';

injectTapEventPlugin();

class TreeDiagram extends Component {
  constructor(props) {
    super(props);
    this.state = {
      newTreeData: treeData,
      showChildren: true,
      xcoord: 50,
      ycoord: 50,
      width: 150,
      height: 100
    };
  }

  componentDidMount() {
    setTimeout(() => {
      this.getToCenter();
    }, 10);
  }

  getToCenter = () => {
    document.documentElement.scrollLeft = (document.body.scrollWidth - document.body.clientWidth) / 2;
  }

  handleCollapse = () => {
    this.setState({
      showChildren: !this.state.showChildren
    }, () => {
      this.getToCenter();
    });
  }

  render() {
    const {
      newTreeData,
      showChildren,
      width,
      height,
      xcoord,
      ycoord
    } = this.state;
    return (
      <div style={ { height: '100vh', width: '100%' } }>
        <div className="tree">
          <svg
            id="treesvg"
            height="100vh"
            width="100%"
          >
            <switch>
              { newTreeData.map(data => (
                <ellipse key={ data.id } cx={ xcoord } cy={ ycoord } rx={ width } ry={ height } stroke="black" strokeWidth="3" fill="none">
                  <NodeLabel
                    nodeData={ data }
                    handleUpdate={ this.handleUpdate }
                    handleCollapse={ this.handleCollapse }
                    parentXCoord={ xcoord }
                    parentYCoord={ ycoord }
                    parentWidth={ width }
                    parentHeight={ height }
                    isParent
                  />
                  { (data.hasChildren && showChildren) && <ChildNode childrenData={ data.children } /> }
                </ellipse>
              )) }

            </switch>
          </svg>
        </div>
      </div>
    );
  }
}

export default TreeDiagram;

/*
<ul>
  { newTreeData.map(data => (
    <li key={ data.id }>
      <NodeLabel
        nodeData={ data }
        handleUpdate={ this.handleUpdate }
        handleCollapse={ this.handleCollapse }
        isParent
      />
      <ReactTransitionGroup>
        { (data.hasChildren && showChildren) && <ChildNode childrenData={ data.children } /> }
      </ReactTransitionGroup>
    </li>
  )) }
</ul>
*/
