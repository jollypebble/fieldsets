import React, { Component } from 'react';
// import Tree from 'react-d3-tree';
// import { Row, Col } from 'react-flexbox-grid';
// import ReactTransitionGroup from 'react-addons-transition-group';
import { treeData } from 'config';
//import d3 from 'd3';

// Click handler
import injectTapEventPlugin from 'react-tap-event-plugin';
// partials
// import NodeLabel from './Partials/NodeLabel';
// import ChildNode from './Partials/ChildNode';

injectTapEventPlugin();

class TreeDiagram extends Component {
  constructor(props) {
    super(props);
    this.state = {
      newTreeData: treeData,
      showChildren: true
    };
  }

  componentDidMount() {
    setTimeout(() => {
      this.getToCenter();
    }, 10);
    // const dimensions = this.treeContainer.getBoundingClientRect();
    // this.setState({
    //   translate: {
    //     x: dimensions.width / 2,
    //     y: 100
    //   }
    // });

    // const line = document.getElementById('line');
    // const mainDiv = document.getElementById('mainDiv');
    // const firstChild = document.getElementById('firstChild');
    // const x1 = mainDiv.offsetLeft + (mainDiv.offsetWidth/2);
    // const y1 = mainDiv.offsetTop + (mainDiv.offsetHeight/2);
    // const x2 = firstChild.offsetLeft + (firstChild.offsetWidth/2);
    // const y2 = firstChild.offsetTop + (firstChild.offsetHeight/2);
    // line.setAttribute('x1',x1);
    // line.setAttribute('y1',y1);
    // line.setAttribute('x2',x2);
    // line.setAttribute('y2',y2);
  }

  getToCenter = () => {
    document.documentElement.scrollLeft = (document.body.scrollWidth - document.body.clientWidth) / 2;
  }

  handleCollapse = () => {
    this.setState({
      showChildren: !this.state.showChildren
    }, () => {
      this.getToCenter();
    });
  }

  render() {
    const {
      newTreeData,
      showChildren
    } = this.state;
    return (
      // <div id='treeWrapper' style={{width: '100%', height: '600px'}} ref={tc => (this.treeContainer = tc)}>
      //   <Tree
      //     data={this.state.treeData2}
      //     translate={this.state.translate}
      //     pathFunc='straight'
      //     orientation='vertical'
      //     allowForeignObjects
      //     zoomable
      //     nodeSize={{x: 170, y: 150}}
      //     nodeLabelComponent={ {
      //       render: <NodeLabel handleUpdate={ this.handleUpdate } />,
      //       foreignObjectWrapper: {
      //	y: -50,
      //	x: -60,
      //	width: 116,
      //	height: 116
      //       }
      //     } }
      //   />
      // </div>
      <div style={ { height: '100vh', width: '100%' } }>
        {/* <Row center='xs' style={{marginTop: 50}}>
	 {this.state.newTreeData.map(data => (
	   <Col key={data.id} style={{position: 'relative'}}>
	     <Col
	       className={`${data.shape}Shape`}
	       style={data.style}>
	       <Row center='xs' middle='xs' style={{height: '100%'}}>
		<Col>
		  {data.name}
		</Col>
	       </Row>
	     </Col>
	     {data.hasChildren && data.children.map(child => (
	       <Col
		key={child.id}
		className={`${child.shape}Shape`}
		style={child.style}>
		<Row center='xs' middle='xs' style={{height: '100%'}}>
		  <Col>
		    {child.name}
		  </Col>
		</Row>
	       </Col>
	     ))}
	   </Col>
	 ))}
	 <svg id='svgTest'>
	   <line id='line'/>
	 </svg>
        </Row> */}

        <div className='tree'>
        	 <svg
        	   id='treesvg'
        	   height='100vh'
        	   width='100%'
        	 >
             <circle cx="50" cy="50" r="40" stroke="black" stroke-width="3" fill="red" />
        	 </svg>
        </div>
      </div>
    );
  }
}

export default TreeDiagram;

/*
<ul>
  { newTreeData.map(data => (
    <li key={ data.id }>
      <NodeLabel
        nodeData={ data }
        handleUpdate={ this.handleUpdate }
        handleCollapse={ this.handleCollapse }
        isParent
      />
      <ReactTransitionGroup>
        { (data.hasChildren && showChildren) && <ChildNode childrenData={ data.children } /> }
      </ReactTransitionGroup>
    </li>
  )) }
</ul>
*/
